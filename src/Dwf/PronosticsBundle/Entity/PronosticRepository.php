<?php

namespace Dwf\PronosticsBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Dwf;

/**
 * PronosticRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PronosticRepository extends EntityRepository
{
	public function findByUserAndEvent(Dwf\PronosticsBundle\Entity\User $user, Dwf\PronosticsBundle\Entity\Event $event, $played = 1)
	{
		$qb = $this->createQueryBuilder('p')
					->leftJoin('p.game','g')
					->where('p.user = :user')
					//->where('p.expires_at > :date')
					->setParameter('user', $user)
					->andWhere('p.event = :event')
					->setParameter('event', $event)
					->orderBy('g.date', 'ASC')
					;
        if($played)
            $qb->andWhere('p.result > 0');
        //$qb->orderBy('p.expiresAt', 'DESC');
		
		$query = $qb->getQuery();
		return $query->getResult();
	}
	
	public function getNbByUserAndEvent(Dwf\PronosticsBundle\Entity\User $user, Dwf\PronosticsBundle\Entity\Event $event, $played = 1)
	{
	    $qb = $this->createQueryBuilder('p')
                    ->select('COUNT(p.id)')
                    ->where('p.user = :user')
                    ->setParameter('user', $user)
                    ->andWhere('p.event = :event')
                    ->setParameter('event', $event)
                    ;
	    if($played)
	        $qb->andWhere('p.result > 0');
	    //$qb->orderBy('p.expiresAt', 'DESC');
	
	    $query = $qb->getQuery();
	    return $query->getSingleScalarResult();
	}

	public function getNbScoreByUserAndEventAndResult(Dwf\PronosticsBundle\Entity\User $user, Dwf\PronosticsBundle\Entity\Event $event, $result, $played = 1)
	{
		$qb = $this->createQueryBuilder('p')
		->select('COUNT(p.id)')
		->where('p.user = :user')
		->setParameter('user', $user)
		->andWhere('p.result = :result')
		->setParameter('result', $result)		
		->andWhere('p.event = :event')
		->setParameter('event', $event)
		;
		if($played)
			$qb->andWhere('p.result > 0');
	
		$query = $qb->getQuery();
		return $query->getSingleScalarResult();
	}
	
	
	public function findAllByGameAndResult(Dwf\PronosticsBundle\Entity\Game $game, $result = null)
	{
		$qb = $this->createQueryBuilder('p')
		->where('p.game = :game')
		//->where('p.result is NULL')
		->setParameter('game', $game)
		//->where('p.expires_at > :date')
		->orderBy('p.expiresAt', 'DESC');
	
		$query = $qb->getQuery();
		//var_dump($query->getSql());
		return $query->getResult();
	}

	public function getResults()
	{
		$qb = $this->createQueryBuilder('p')
		//->addSelect('p.user')
		//->addSelect('p')
		->addSelect('SUM(p.result) AS total')
		//->where('p.user = :user')
		//->where('p.expires_at > :date')
		//->setParameter('user', $user)
		->groupBy('p.user')
		->orderBy('total', 'DESC')
		;
	
		$query = $qb->getQuery();
		//var_dump($query->getSql());
		return $query->getResult();
	}
	
	public function getResultsForGroup(Application\Sonata\UserBundle\Entity\Group $group)
	{
		$qb = $this->createQueryBuilder('p')
					->addSelect('SUM(p.result) AS total')
					->where('p.user.group = :group')
					->setParameter('group', $group->getId())
					->groupBy('p.user')
					->orderBy('total', 'DESC')
		;
	
						$query = $qb->getQuery();
		//var_dump($query->getSql());
		return $query->getResult();
	}
	
	public function getResultsByEvent(Dwf\PronosticsBundle\Entity\Event $event)
	{
		$qb = $this->createQueryBuilder('p')
				->addSelect('SUM(p.result) AS total')
				->where('p.event = :event')
				->setParameter('event', $event)
				->groupBy('p.user')
				->orderBy('total', 'DESC')
			;
	
		$query = $qb->getQuery();
		return $query->getResult();
		}
	
	public function getResultsByEventAndGroup(Dwf\PronosticsBundle\Entity\Event $event, $group)
		{
			$qb = $this->createQueryBuilder('p')
			->leftJoin('p.user','u')
			->leftJoin('u.groups', 'g')
			->select('p','SUM(p.result) AS total', 'COUNT(p.id) AS nb_pronostics')
			->where('g.id IN (:group)')
			->setParameter('group', $group)
			->andWhere('p.event = :event')
			->setParameter('event', $event)
			->groupBy('p.user')
			->orderBy('total', 'DESC')
			;
		
			$query = $qb->getQuery();
			return $query->getResult();
		}
	
	public function getResultsByEventAndUser(Dwf\PronosticsBundle\Entity\Event $event, Dwf\PronosticsBundle\Entity\User $user)
		{
		    $qb = $this->createQueryBuilder('p')
		    ->leftJoin('p.user','u')
		    ->select('SUM(p.result) AS total')
		    ->where('p.event = :event')
		    ->setParameter('event', $event)
		    ->andWhere('p.user = :user')
		    ->setParameter('user', $user)
		    ->groupBy('p.user')
		    ;
		
		    $query = $qb->getQuery();
		    return $query->getOneOrNullResult();
		}

	public function findAllForUser(Dwf\PronosticsBundle\Entity\User $user)
	{
		$qb = $this->createQueryBuilder('p')
		->where('p.user = :user')
		->andWhere('p.result > 0')
		->setParameter('user', $user)
		->orderBy('p.expiresAt', 'DESC');
	
		$query = $qb->getQuery();
		return $query->getResult();
	}
	
	public function findAllByGame(Dwf\PronosticsBundle\Entity\Game $game, $groups = "")
	{
		$list = array();
	    $qb = $this->createQueryBuilder('p')
	    //->addSelect('p.*')
	    ->leftJoin('p.user','u')
	    ->leftJoin('u.groups', 'g')
	    ->select('p','g.name AS group_name')
	    ->where('p.game = :game')
	    ->setParameter('game', $game);
	    if($groups) {
	    	foreach ($groups as $group)
	    		array_push($list, $group->getID());
	    	//$test = implode(",", $list);
	    	$qb->andWhere('g.id IN (:group)')
				->setParameter('group', $list);
	    }
	    $qb->addOrderBy('p.result', 'DESC');
	    $qb->addOrderBy('g.id', 'ASC');
	
	    $query = $qb->getQuery();
	    return $query->getResult();
	}
	
}