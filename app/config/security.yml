parameters:
    security.acl.permission.map.class: Sonata\AdminBundle\Security\Acl\Permission\AdminPermissionMap
security:
    encoders:
        Dwf\PronosticsBundle\Entity\User: sha512

    role_hierarchy:
        #ROLE_SONATA_ADMIN_GAME_ADMIN:
        #    - ROLE_SONATA_ADMIN_GAME_LIST
        #    - ROLE_SONATA_ADMIN_GAME_VIEW        
        ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN, ROLE_SONATA_GAME_ADMIN, ROLE_SONATA_ADMIN_GAME_ADMIN, ROLE_SONATA_ADMIN_TEAM_ADMIN, ROLE_SONATA_ADMIN_PLAYER_ADMIN, ROLE_SONATA_ADMIN_SCORER_ADMIN]
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    providers:
        fos_userbundle:
            id: fos_user.user_manager
        main:
            id: fos_user.user_provider.username

    firewalls:
        dev:
            pattern:  ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern:            /admin(.*)
            context:            user
            form_login:
                provider:       fos_userbundle
                login_path:     /admin/login
                use_forward:    false
                check_path:     /admin/login_check
                failure_path:   null
            logout:
                path:           /admin/logout
                target:         /admin
            anonymous:          true
               
#        register_firewall:
#            pattern:    ^/register$
#            anonymous:  ~        
#        login_firewall:
#            pattern:    ^/login$
#            anonymous:  ~
        main:
            pattern:     ^/
            anonymous:  ~
            oauth:
                resource_owners:
                    facebook:           "/login/check-facebook"
                login_path:        /login
                use_forward:       false
                failure_path:      /login

                oauth_user_provider:
                    service: dwf_pronosticsbundle.user_provider
            provider:   main
            form_login:
                provider:       fos_userbundle
                #provider:       main
                login_path: fos_user_security_login
                check_path: fos_user_security_check
                always_use_default_target_path: true
                default_target_path: /events
                #use_referer: true
            logout:
                path:   fos_user_security_logout
                target: /
            remember_me:
                key:    %secret%

    access_control:
        #- { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY, requires_channel: https }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/1_reglement$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Admin login page needs to be access without credential
        - { path: ^/admin/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }

        # Secured part of the site
        # This config requires being logged for the whole site and having the admin role for the admin part.
        # Change these rules to adapt them to your needs
        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
        - { path: ^/.*, role: ROLE_USER }
        
    #role_hierarchy:
        #ROLE_ADMIN:       [ROLE_USER, ROLE_SONATA_ADMIN]
        #ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
        
    acl:
        connection: default
